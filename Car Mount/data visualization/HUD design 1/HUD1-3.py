# Form implementation generated from reading ui file 'HUDdesign1-1.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from pyqtgraph import PlotWidget
from PyQt6.QtCore import QTimer
import serial as ps
import csv
import time
import numpy as np
import math
import os

import serial.tools.list_ports as ps_ports
port_silly = ps_ports.comports()
ports = []
for ii in port_silly:
    ports.append(ii.device)

global t
global loadcell1
global loadcell2
global loadcell3
global dynPress
global F_L
global F_D
global F_M
global x_off
global y_off
global d_ab

# SET THESE VALUES BEFORE THE EXPERIMENT
x_off = 0.1
y_off = 0
d_ab = 0.75
# ======================================

t = [0]
loadcell1 = [0]
loadcell2 = [0]
loadcell3 = [0]
dynPress = [0]
C_L = []
C_D = []
C_M = []

def dataClean(vals): #returns a true if data is apparently clean and usable. returns false otherwise

    if len(vals)!=5: #make sure there is appropriate number of data points
        return False
    if len(t)>0: #make sure the most recent time value is not below the current value
        if vals[0]<t[-1]:
            return False
    return True

def loads2forces(R1,R2,R3):
    #use linear equations to calculate lift drag and moment
    L = R1*(-(math.sqrt(2)/2))+R2*(-(math.sqrt(2)/2))+R3*(-1)
    D = R1*(math.sqrt(2)/2)+R2*(-(math.sqrt(2)/2))+R3*(0)
    M = R1*(-(math.sqrt(2)/2)*(y_off-x_off))+R2*((math.sqrt(2)/2)*(y_off+x_off+d_ab))+R3*(x_off+d_ab)
    return L,D,M 

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1510, 799)
        Form.setAutoFillBackground(False)
        Form.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.pushButton = QtWidgets.QPushButton(parent=Form)
        self.pushButton.setGeometry(QtCore.QRect(1200, 650, 91, 41))
        self.pushButton.setStyleSheet("background-color: rgb(197, 197, 197);")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(parent=Form)
        self.pushButton_2.setGeometry(QtCore.QRect(1300, 650, 141, 41))
        self.pushButton_2.setStyleSheet("background-color: rgb(197, 197, 197);")
        self.pushButton_2.setCheckable(True)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(parent=Form)
        self.pushButton_3.setGeometry(QtCore.QRect(1450, 650, 51, 41))
        self.pushButton_3.setStyleSheet("background-color: rgb(197, 197, 197);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.comboBox = QtWidgets.QComboBox(parent=Form)
        self.comboBox.setGeometry(QtCore.QRect(1320, 700, 181, 41))
        self.comboBox.setStyleSheet("background-color: rgb(189, 189, 189);")
        self.comboBox.setObjectName("comboBox")
        self.lineEdit = QtWidgets.QLineEdit(parent=Form)
        self.lineEdit.setGeometry(QtCore.QRect(1320, 750, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("background-color: rgb(208, 208, 208);")
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(parent=Form)
        self.label.setGeometry(QtCore.QRect(1194, 705, 121, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Window, brush)
        self.label.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(255, 255, 255);")
        self.label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(parent=Form)
        self.label_2.setGeometry(QtCore.QRect(1200, 750, 121, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Window, brush)
        self.label_2.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.pushButton_4 = QtWidgets.QPushButton(parent=Form)
        self.pushButton_4.setGeometry(QtCore.QRect(1440, 750, 61, 41))
        self.pushButton_4.setStyleSheet("background-color: rgb(197, 197, 197);")
        self.pushButton_4.setObjectName("pushButton_4")
        self.textEdit = QtWidgets.QTextEdit(parent=Form)
        self.textEdit.setGeometry(QtCore.QRect(1200, 50, 301, 591))
        self.textEdit.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textEdit.setReadOnly(True)
        self.textEdit.setObjectName("textEdit")
        self.label_3 = QtWidgets.QLabel(parent=Form)
        self.label_3.setGeometry(QtCore.QRect(1210, 10, 281, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_3.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.widget = QtWidgets.QWidget(parent=Form)
        self.widget.setGeometry(QtCore.QRect(12, 10, 1171, 771))
        self.widget.setObjectName("widget")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_8 = QtWidgets.QLabel(parent=self.widget)
        self.label_8.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_8.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.verticalLayout.addWidget(self.label_8)
        self.C_lift = PlotWidget(parent=self.widget)
        self.C_lift.setObjectName("C_lift")
        self.verticalLayout.addWidget(self.C_lift)
        self.horizontalLayout_2.addLayout(self.verticalLayout)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_6 = QtWidgets.QLabel(parent=self.widget)
        self.label_6.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_6.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_2.addWidget(self.label_6)
        self.C_drag = PlotWidget(parent=self.widget)
        self.C_drag.setObjectName("C_drag")
        self.verticalLayout_2.addWidget(self.C_drag)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_7 = QtWidgets.QLabel(parent=self.widget)
        self.label_7.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_7.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.verticalLayout_3.addWidget(self.label_7)
        self.C_moment = PlotWidget(parent=self.widget)
        self.C_moment.setObjectName("C_moment")
        self.verticalLayout_3.addWidget(self.C_moment)
        self.horizontalLayout_2.addLayout(self.verticalLayout_3)
        self.verticalLayout_6.addLayout(self.horizontalLayout_2)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_4 = QtWidgets.QLabel(parent=self.widget)
        self.label_4.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_4.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_4.addWidget(self.label_4)
        self.LoadCells = PlotWidget(parent=self.widget)
        self.LoadCells.setObjectName("LoadCells")
        self.verticalLayout_4.addWidget(self.LoadCells)
        self.horizontalLayout.addLayout(self.verticalLayout_4)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_5 = QtWidgets.QLabel(parent=self.widget)
        self.label_5.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_5.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_5.addWidget(self.label_5)
        self.DynPress = PlotWidget(parent=self.widget)
        self.DynPress.setObjectName("DynPress")
        self.verticalLayout_5.addWidget(self.DynPress)
        self.horizontalLayout.addLayout(self.verticalLayout_5)
        self.verticalLayout_6.addLayout(self.horizontalLayout)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        #-----------------custom parameters-----------------------
        self.pushButton_4.clicked.connect(self.setSpeed)
        self.comboBox.addItems(ports)
        self.comboBox.currentTextChanged.connect(self.changeCOMport)
        self.pushButton_3.clicked.connect(self.restartHUD)

        self.initialPort_flag = True

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton.setText(_translate("Form", "Refresh HUD"))
        self.pushButton_2.setText(_translate("Form", "Start/Stop collection"))
        self.pushButton_3.setText(_translate("Form", "Restart"))
        self.label.setText(_translate("Form", "Select COM port:"))
        self.label_2.setText(_translate("Form", "Set speed (m/s):"))
        self.pushButton_4.setText(_translate("Form", "Set"))
        self.label_3.setText(_translate("Form", "Log messages"))
        self.textEdit.setText(">> Lilypad Aerospace - Console Log")
        self.label_3.setText(_translate("Form", "Log messages"))
        self.label_8.setText(_translate("Form", "Lift Coefficient Polar"))
        self.label_6.setText(_translate("Form", "Drag Coefficient Polar"))
        self.label_7.setText(_translate("Form", "Moment Coefficient Polar"))
        self.label_4.setText(_translate("Form", "Load Cell Outputs"))
        self.label_5.setText(_translate("Form", "Dynamics Pressure"))

    def setSpeed(self):
        self.spd_command = self.lineEdit.text() #get speed value as string

        #send updated value to arduino for 7 segment display <WIP>
        self.arduinoPort.flushOutput()
        time.sleep(0.02)
        self.arduinoPort.write(bytes(self.spd_command,'utf-8'))

        #update console with new setting
        spdStrList = ["New target speed: "+self.spd_command+" m/s ("+str(float(self.spd_command)*2.23694)[:5]+" MPH)"]
        spdStr = ''.join(spdStrList)
        self.updateLog(spdStr)

        if (float(self.spd_command)>37):
            self.updateLog("New speed is above upper limit!!!")

    def updateLog(self,upd):
        log_msg_concat = [">> ",upd]
        log_msg = ''.join(log_msg_concat)
        self.textEdit.append(log_msg)

    def changeCOMport(self):
        #close old com port and reset the plots
        if not self.initialPort_flag:
            self.arduinoPort.close()

        
        self.LoadCells.clear()
        self.DynPress.clear()
        self.C_lift.clear()
        self.C_drag.clear()
        self.C_moment.clear()
        t.clear()
        loadcell1.clear()
        loadcell2.clear()
        loadcell3.clear()
        dynPress.clear()
        C_L.clear()
        C_D.clear()
        C_M.clear()
        self.firstPlotFlag = True
        
        #open new com port and flush the serial buffer
        newPort = self.comboBox.currentText()
        self.arduinoPort = ps.Serial(newPort,57600)
        self.arduinoPort.flushInput()
        #self.arduinoPort.flushOutput()

        time.sleep(1)

        #send update to log messages
        updMsg = ["New serial port --> ",newPort]
        self.updateLog(''.join(updMsg))

        #if this is the first port selected we begin plotting data
        if self.initialPort_flag:
            self.initialPort_flag = False
            self.updatePlots()

    def getDataNoGarbage(self):
        self.arduinoPort.flushInput()
        #self.arduinoPort.flushOutput() #the buffer gets flushed and it might cut off a data packet in the middle

        time.sleep(0.02) #wait a moment for more data to arrive in buffer

        do_flag = True
        self.vals = [1]
        n = 1
        while do_flag or not dataClean(self.vals): #keep re-reading the buffer until we get a good line
            self.data = self.arduinoPort.readline()
            if len(self.data)>10:
                if self.data[0]<58 and self.data[0]>47:
                    data_str = str(self.data.decode("utf-8"))
                    self.vals = list(map(float, data_str.split(',')))
                else:
                    self.vals = [1]
            n = n+1
            if do_flag:
                do_flag = False

    def updatePlots(self):
        #check the buffer for actual data
        if self.arduinoPort.inWaiting()==0: #if there are zero bytes in the buffer
            #skip this update and reset the timer
            self.timer = QTimer()
            self.timer.timeout.connect(self.updatePlots)
            self.timer.start(1000)
            #noDataUpd = ''.join([self.comboBox.currentText()," - no data detected"])
            #self.updateLog(noDataUpd)
            
        else:
            self.getDataNoGarbage()

            if dataClean(self.vals): #if the data is not corrupted
                
                #save the data to csvs NEED TO DO STILL
                #first save to full csv

                #if the collection is live save to secondary file and update plots
                if self.pushButton_2.isChecked():

                    #update the plots with new data
                    t.append(self.vals[0]/1000)
                    loadcell1.append(self.vals[1])
                    loadcell2.append(self.vals[2])
                    loadcell3.append(self.vals[3])
                    dynPress.append(self.vals[4])

                    L,D,M = loads2forces(self.vals[1],self.vals[2],self.vals[3])

                    C_L.append(L) #totally not correct and needs correction later
                    C_D.append(D)
                    C_M.append(M)

                    self.LoadCells.clear()
                    self.DynPress.clear()
                    self.C_lift.clear()
                    self.C_drag.clear()
                    self.C_moment.clear()
                    
                    self.C_lift.plot(t,C_L)
                    self.C_drag.plot(t,C_D)
                    self.C_moment.plot(t,C_M)
                    self.LoadCells.plot(t,loadcell1,pen='r',name="Load Cell 1")
                    self.LoadCells.plot(t,loadcell2,pen='b',name="Load Cell 2")
                    self.LoadCells.plot(t,loadcell3,pen='g',name="Load Cell 3")
                    self.DynPress.plot(t,dynPress)
                    
                    if self.firstPlotFlag:
                        self.LoadCells.addLegend()
                        self.firstPlotFlag = False
                    
                    self.C_lift.setXRange((t[-1]-10),t[-1])
                    self.C_drag.setXRange((t[-1]-10),t[-1])
                    self.C_moment.setXRange((t[-1]-10),t[-1])
                    self.LoadCells.setXRange((t[-1]-10),t[-1])
                    self.DynPress.setXRange((t[-1]-10),t[-1])

    ##                if len(t)>10: #this section may not be necessary...
    ##                    del(t[0])
    ##                    del(loadcell1[0])
    ##                    del(loadcell2[0])
    ##                    del(loadcell3[0])
    ##                    del(dynPress[0])
    ##                    del(C_L[0])
    ##                    del(C_D[0])
    ##                    del(C_M[0])
    ##                    print(t)

            else: #otherwise notify the engineer but dont use the data
                updMsg = ["Corrupted data from serial near t = ",str(t[-1])]
                self.updateLog(''.join(updMsg))

            #connect a timer to rerun the function
            self.timer = QTimer()
            self.timer.timeout.connect(self.updatePlots)
            self.timer.start(100)

    def restartHUD(self):
        #close the CSVs

        #delete the variables

        #execute the script
        os.execv(__file__, sys.argv)


if __name__ == "__main__":
    import sys

    with open('data_full.csv','w',newline='') as csv_file:
        csv_full = csv.DictWriter(csv_file,fieldnames=["Parameter"])
        csv_full.writeheader()
        
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()

    with open('data_full.csv','a',newline='') as csv_file:
        csv_full = csv.DictWriter(csv_file,fieldnames=["parameter"])
    
    #allow user to select a COM port before anything starts
    ui.updateLog("Select the COM port to begin.")

    sys.exit(app.exec())
